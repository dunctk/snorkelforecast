# Generated by Django 5.2.4 on 2025-09-13 12:20

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("conditions", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="SnorkelLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "osm_id",
                    models.BigIntegerField(
                        help_text="OpenStreetMap node/way/relation ID", unique=True
                    ),
                ),
                (
                    "osm_type",
                    models.CharField(
                        choices=[("node", "Node"), ("way", "Way"), ("relation", "Relation")],
                        help_text="OpenStreetMap element type",
                        max_length=10,
                    ),
                ),
                ("country_slug", models.CharField(db_index=True, max_length=64)),
                ("city_slug", models.CharField(db_index=True, max_length=64)),
                (
                    "name",
                    models.CharField(help_text="Display name of the location", max_length=200),
                ),
                ("country", models.CharField(help_text="Country name", max_length=100)),
                (
                    "region",
                    models.CharField(blank=True, help_text="Region/state/province", max_length=100),
                ),
                ("latitude", models.FloatField(help_text="Latitude in decimal degrees")),
                ("longitude", models.FloatField(help_text="Longitude in decimal degrees")),
                (
                    "timezone",
                    models.CharField(
                        default="UTC", help_text="IANA timezone identifier", max_length=50
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the snorkeling location"
                    ),
                ),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("beach", "Beach"),
                            ("cove", "Cove"),
                            ("bay", "Bay"),
                            ("island", "Island"),
                            ("reef", "Reef"),
                            ("dive_site", "Dive Site"),
                            ("marine_park", "Marine Park"),
                            ("other", "Other"),
                        ],
                        default="beach",
                        help_text="Type of snorkeling location",
                        max_length=50,
                    ),
                ),
                (
                    "is_popular",
                    models.BooleanField(default=False, help_text="Featured as popular location"),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, help_text="Manually verified for quality"),
                ),
                (
                    "quality_score",
                    models.FloatField(
                        default=0.0, help_text="Quality score based on reviews/ratings"
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        default="osm", help_text="Data source (osm, user, etc.)", max_length=50
                    ),
                ),
                ("osm_tags", models.JSONField(default=dict, help_text="Raw OpenStreetMap tags")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.RemoveConstraint(
            model_name="forecasthour",
            name="uniq_location_time",
        ),
        migrations.RenameIndex(
            model_name="forecasthour",
            new_name="conditions__country_916ec8_idx",
            old_name="conditions_country_city_time_idx",
        ),
        migrations.AlterField(
            model_name="forecasthour",
            name="city_slug",
            field=models.CharField(blank=True, max_length=64),
        ),
        migrations.AlterField(
            model_name="forecasthour",
            name="country_slug",
            field=models.CharField(blank=True, max_length=64),
        ),
        migrations.AddIndex(
            model_name="snorkellocation",
            index=models.Index(
                fields=["country_slug", "city_slug"], name="conditions__country_fe201f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="snorkellocation",
            index=models.Index(
                fields=["is_popular", "quality_score"], name="conditions__is_popu_d10500_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="snorkellocation",
            index=models.Index(fields=["location_type"], name="conditions__locatio_021a63_idx"),
        ),
        migrations.AddIndex(
            model_name="snorkellocation",
            index=models.Index(fields=["source"], name="conditions__source_413629_idx"),
        ),
        migrations.AddConstraint(
            model_name="snorkellocation",
            constraint=models.UniqueConstraint(
                fields=("country_slug", "city_slug"), name="unique_location_slugs"
            ),
        ),
        migrations.AddField(
            model_name="forecasthour",
            name="location",
            field=models.ForeignKey(
                blank=True,
                help_text="The snorkeling location this forecast is for",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="forecast_hours",
                to="conditions.snorkellocation",
            ),
        ),
        migrations.AddIndex(
            model_name="forecasthour",
            index=models.Index(fields=["location", "time"], name="conditions__locatio_05efe1_idx"),
        ),
        migrations.AddConstraint(
            model_name="forecasthour",
            constraint=models.UniqueConstraint(
                fields=("location", "time"), name="uniq_location_time"
            ),
        ),
    ]
