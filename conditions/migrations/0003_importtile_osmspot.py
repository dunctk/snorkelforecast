# Generated by Django 5.2.4 on 2025-09-13 18:36

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("conditions", "0002_add_snorkel_location_model"),
    ]

    operations = [
        migrations.CreateModel(
            name="ImportTile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("z", models.IntegerField(help_text="Zoom level")),
                ("x", models.IntegerField(help_text="Tile X coordinate")),
                ("y", models.IntegerField(help_text="Tile Y coordinate")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("done", "Done"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                        ],
                        default="pending",
                        max_length=12,
                    ),
                ),
                ("retries", models.IntegerField(default=0)),
                ("max_retries", models.IntegerField(default=5)),
                ("next_try_at", models.DateTimeField(blank=True, null=True)),
                (
                    "spots_imported",
                    models.IntegerField(
                        default=0, help_text="Number of spots imported from this tile"
                    ),
                ),
                (
                    "import_duration",
                    models.FloatField(
                        blank=True, help_text="Import duration in seconds", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_error", models.TextField(blank=True, help_text="Last error message")),
            ],
            options={
                "indexes": [
                    models.Index(fields=["status"], name="conditions__status_522a67_idx"),
                    models.Index(fields=["next_try_at"], name="conditions__next_tr_905a61_idx"),
                    models.Index(fields=["z"], name="conditions__z_0f379e_idx"),
                ],
                "unique_together": {("z", "x", "y")},
            },
        ),
        migrations.CreateModel(
            name="OSMSpot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        default="osm", help_text="Data source (osm, user, wikidata)", max_length=16
                    ),
                ),
                (
                    "osm_type",
                    models.CharField(
                        blank=True,
                        choices=[("n", "node"), ("w", "way"), ("r", "relation")],
                        help_text="OSM element type",
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "osm_id",
                    models.BigIntegerField(
                        blank=True, db_index=True, help_text="OSM element ID", null=True
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, help_text="Spot name from OSM", max_length=255),
                ),
                ("tags", models.JSONField(default=dict, help_text="All OSM tags as JSON")),
                ("latitude", models.FloatField(help_text="Latitude in WGS84")),
                ("longitude", models.FloatField(help_text="Longitude in WGS84")),
                (
                    "confidence",
                    models.FloatField(default=0.5, help_text="Snorkeling suitability score (0-1)"),
                ),
                (
                    "country_code",
                    models.CharField(blank=True, help_text="ISO country code", max_length=3),
                ),
                (
                    "region",
                    models.CharField(blank=True, help_text="Administrative region", max_length=100),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_osm_update",
                    models.DateTimeField(
                        blank=True, help_text="Last time this spot was updated from OSM", null=True
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Manually verified as snorkeling spot"
                    ),
                ),
                ("user_votes", models.IntegerField(default=0, help_text="Number of user upvotes")),
                (
                    "user_flags",
                    models.IntegerField(default=0, help_text="Number of user flags/reports"),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["confidence"], name="conditions__confide_27bbe0_idx"),
                    models.Index(fields=["country_code"], name="conditions__country_87c04b_idx"),
                    models.Index(fields=["is_verified"], name="conditions__is_veri_67a32a_idx"),
                    models.Index(fields=["source"], name="conditions__source_5cee34_idx"),
                ],
                "unique_together": {("osm_type", "osm_id")},
            },
        ),
    ]
